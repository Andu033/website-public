[% # config/main
   #
   # This is the main View configuration template. It is processed before
   # any other page by virtue of it being defined as a PRE_PROCESS 
   # template.  This is the place to define any extra template variables,
   # macros, load plugins, and perform any other template setup.

   IF c.config.debug;
     # define a debug() macro directed to c's log
     MACRO debug(message) CALL c.log.debug(message);
   END;

   # Site-wide data
   site = {
     copyright => '2000-2010 The WormBase Consortium',
     unknown   => 'unknown/not applicable',     # what to display if a field is empty/not applicable.
   };

#   # MACROs for building URLs.
#   # 2nd approach: using formats
#   #   external_link = format('<a href="%s" target="_blank">%s</a>');
#

    MACRO tag2link(data,text,is_classic) BLOCK;  
      class =  data.class FILTER lower;
       # Classic page URLs.
       IF is_classic;
          url  = site.class2action.$class.action;
          IF text;
	   "<a href=\"$url\?name=" _ data.id  _ "\" class=\"$data.class\">  $text </a>";
          ELSE;
	   "<a href=\"$url\?name=" _ data.id _ "\" class=\"$data.class\">  $data.label </a>";
          END;
      ELSE;
          link = '/reports/' _ class _ '/' _ data.id ;
   #      link = '/reports/' _ data.link _ '/' _ data.id ;
         IF text;
	   "<a href=\"$link\" class=\"$data.class\">  $text </a>";;
         ELSE;
	   "<a href=\"$link\" class=\"$data.class\">  $data.label </a>";
         END;
      END; 
   END;

# Like tag2link, bt for cases where we only have text and no object.
# You must provide both the id and text.
# An optional fourth parameter, is_classic, will be classic WormBase
# URLs
    MACRO text2link(class,id,text,is_classic) BLOCK;  
       class =  class FILTER lower;

       # Classic page URLs.
       IF is_classic;
          url  = site.class2action.$class.action;
	   "<a href=\"$url\?name=$id\" class=\"$class\">$text</a>";
      ELSE;
	   "<a href=\"/reports/$class/$id\" class=\"$class\">$text</a>";
      END; 
   END;


# Dynamically select a tempate: custom, common, generic
MACRO select_field_template(field,class) BLOCK;
     IF c.config.generic_fields.$field;
              "generic/field.tt2";
     ELSIF c.config.common_fields.$field;
              "shared/fields/" _ field _ ".tt2";
     ELSE;
              "classes/" _ class _ "/" _ field _ '.tt2';
     END;
END;

MACRO select_widget_template(widget,class) BLOCK;
     IF c.config.generic_widgets.$widget;
              "generic/widget.tt2";
     ELSIF c.config.common_widgets.$widget;
              "shared/widgets/" _ widget _ ".tt2";
     ELSE;
              "classes/" _ class _ "/" _ widget _ '.tt2';
     END;
END;


   # load up any other configuration items 
   PROCESS config/col
         + config/url
	 + config/external_urls
         + config/assets
	 + config/debug;

   # set defaults for variables, etc.
   DEFAULT 
     message = 'There is no message';

   # Set some default templates
   DEFAULT field_block  = "field_block";
   DEFAULT widget_block = "widget_block";

   # Our custom URL mapping plugin.
   # Usage: url.Link();
   # USE url;

   # Data munging utilities
   # USE Util;

   # Basic table formatting. Perhaps these should be dynamic instead
   #USE Table(list, rows=5)

   # For debugging ONLY!
   USE Dumper(Indent=1);

   #######################################
   # Define some convenient macros   
   #######################################
   # image: wrap a src in an image tag using the format plugin
   USE image  = format('<img src="%s" valign="middle" style="width: 95%; " />');
   USE toggle = format('<img border="0" height="11" src="%s" width="6" alt="&gt;" valign="middle"> %s');
   USE link = format('<a href="%s" target="_blank">%s</a>');


   # Move to lib/formatting?
   MACRO comment(msg) BLOCK;
      "<!-- " _ msg _ " -->";
    END;
 
    MACRO display_evidence(object) BLOCK;

      data = util.parse_hash(object);
      IF data;

	# Format the evidence into a table with the intent
	# it will be displayed as a mouseover.
	# This is (nearly) contrary to the way it is handled
 	# now, where it is displayed inline in about a billion different ways.
    # It seems to me that this should actually be a template.
    # Can I include a template/wrapper from within a macro?
    "<div class=\"evidence\">";
    "<div class=\"title\">Evidence</div>";

	# Conditionally format the data for each type of evidence seen
	# I could prioritize the display by ordering the keys in the hash
	FOREACH key IN data.keys;
		type = data.$key;  # Stringiying an object as a hash key kills it. Need value.

        "<div class=\"type\">Type: $type</div>";

		# Conceal curator confirmed entries
		NEXT IF type == "Curator_confirmed";

 		# Grab the first level entries for each.
    		# there is additional information
    		sources = type.col;

    		# Add appropriate markup for each type of Evidence seen
        "<div class=\"source\">";
    	IF type == 'Paper_evidence';

		    FOREACH paper IN sources;
				# Do a short format
				url.Link(item=paper text=paper.Title);
				"<br>";
			END;
		ELSIF type == 'Published_as';
			FOREACH item IN sources
				url.Link(item);
				"<br>";
			END;
		ELSIF type == 'Person_evidence' || type == 'Curator_confirmed';
			FOREACH person IN sources;
				url.Link(item=person text=person.Standard_name);
				"<br>";
			END;
		ELSIF type == 'Author_evidence';
			FOREACH author IN sources;
				url.Link(author);
				"<br>";
			END;
		ELSIF type == 'Accession_evidence';
			FOREACH source IN sources;
				params = source.row;
				# my $accession_links   ||= Configuration->Protein_links;
				# my $link_rule = $accession_links->{$database};
				# $data = $link_rule ? a({-href=>sprintf($link_rule,$accession),
				#-target=>'_blank'},"$database:$accession")
			  	#: ObjectLink($accession,"$database:$accession");
				"ACCESSION EVIDENCE NOT DONE";
			END;
		ELSIF type == 'Protein_id_evidence';
      			#$data = join($join,map { a({-href=>Configuration->Entrezp},$_) } @sources);
      			"PROTEIN ID EVIDENCE NOT DONE";
		ELSIF type == 'GO_term_evidence'
			|| type == 'Laboratory_evidence'
			|| type == 'Expr_pattern_evidence'
			|| type == 'Microarray_results_evidence'
			|| type == 'Gene_regulation_evidence';
			FOREACH source IN sources;
				url.Link(source);
				"<br>";
			END;
		ELSIF type == 'RNAi_evidence';
			FOREACH source IN sources;
				IF source.History_name;
					mytext="$source ($source.History_name)";
				ELSE;
					name=source;
				END;
				url.Link(item=source text=mytext);
			END;
		ELSIF type == 'CGC_data_submission';
		ELSIF type == 'Inferred_automatically';
			FOREACH source IN sources;
				"$source<br>";
			END;
		ELSIF type == 'Date_last_updated';
			FOREACH source IN sources;
				"$source<br>";
			END;
		END;	
		"</div>";
	END;
	"</div>";
    END;
  END;


    MACRO toggle(title,content,open) BLOCK;
      "<p>";
      '<div class="togglebox">';
         '<div class="togglebox_title">';
  	 '<a href="#" class="toggle">';
              '<span class="closed">'_ image(site.toggles.closed) _ "</span> $title</a>";
         "</div>";
         '<div class="togglebox_content" style="display:none">';
             content;
         "</div>";
       "</div>";
    END;


  ###########################################
  # Class-to-action mapping
  # Map classes to their old school URLs
  # This is only used by the classic view
  ###########################################
  site.class2action = { 	
	       align     = { action = '/db/seq/align'
		             title  = 'alignment' }
	       aligner   = { action = '/db/seq/aligner'
                             title  = 'EST Alignments' }
	       antibody  = { action = '/db/gene/antibody'
                             title  = 'Antibody Summary' }
	       aoterm    = { action = '/db/ontology/anatomy'
                             title  = 'Anatomy Ontology' }
	       author    = { action = '/db/misc/person'
                             title =  'Author Info' }
	       biblio    = { action = '/db/misc/biblio'
                             title  = 'Bibliography' }
	       cds       = { action = '/db/seq/sequence'
                             title  = 'Sequence Summary' }
	       cell      = { action = '/db/cell/cell.cgi'
                             title  = 'Cell Summary' }
	       clone     = { action = '/db/seq/clone'
                             title  = 'Clone Summary' }
	       expression_cluster = { action = '/db/microarray/expression_cluster'
                            	      title  = 'Microarray Expression Cluster Summary' }

	       expr_pattern = { action = '/db/gene/expression'
                        	title  = 'Expression Pattern' }

	       expr_profile = { action = '/db/gene/expr_profile'
	                        title  = 'Expression profile' }

	       gene       = { action = '/db/gene/report_by_ajax'
                              title  = 'Gene Summary' }

	       gene_name  = { action = '/db/gene/gene'
                              title  = 'Gene Summary' }

	       gene_class = { action = '/db/gene/gene_class'
                              title  = 'Gene Class Summary' }
	       gene_regulation = { action = '/db/gene/regulation'
                    	           title  = 'Gene Regulation Summary' }
	       gmap       = { action = '/db/misc/epic'
                              title  = 'Genetic Map' }
	       go_term    = { action = '/db/ontology/gene'
                              title  = 'GO Term' }
	       go_dag     = { action = '/db/ontology/go_dag'
                              title  = 'GO DAG' }
	       homology_group = { action = '/db/gene/homology_group'
               	                  title  = 'Homology Group' }
	       hunter     = { action = '/db/seq/gbrowse/elegans/'
                              title  = 'Genome Browser' }
	       laboratory = { action = '/db/misc/laboratory'
                              title  = 'Lab Listing' }
	       life_stage = { action = '/db/misc/life_stage'
                              title  = 'Life Stage' }
	       locus      = { action = '/db/gene/locus'
                              title  = 'Locus Summary' }
	       mappingdata = { action = '/gene/mapping_data'
	                       title  = 'Map Data' }
	       mapservlet  = { action = '/db/mapview/geneticmap'
	                       title  = 'Clickable Map' }
	       MindOfWorm  = { action = '/db/cell/mindofworm'
 	                       title  = 'Mind of Worm' }
	       microarray_experiment  = {
		               action  = '/db/microarray/results'
	 	               title   = 'Microarray Summary' }
	       microarray_results    = { action = '/db/microarray/results'
	 	                         title  = 'Microarray Summary' }
	       motif       = { action = '/db/gene/motif'
	                       title  = 'Motif' }
	       model       = { action = '/db/misc/model'
	                       title  = 'Schema' }
	       nbrowse     = { action = '/db/seq/interaction_viewer'
 	                       title  = 'N-Browse Interaction Viewer'}
	       nearby_genes= { action = '/db/gene/genetable#pos'
	                       title  = 'Nearby Genes' }
	       oligo_set    = { action = '/db/seq/pcr'
	                        title  = 'Microarray Oligos' }
	       operon       = { action = '/db/gene/operon'
	                        title  = 'Operon Summary' }	       
	       paper        = { action = '/db/misc/paper'
	                        title  = 'Citation' }	       
	       pcr_product  = { action = '/db/seq/pcr'
	                        title  = 'PCR Assay' }	       
	       pedigree     = { action = '/db/searches/pedigree'
	                        title  = 'Pedigree Browser' }	       
	       person       = { action = '/db/misc/person'
	                        title  = 'Person Info' }	       
	       person_name  = { action = '/db/misc/person'
	                        title  = 'Person Info' }	       
	       phenotype    = { action = '/db/misc/phenotype'
	                        title  = 'Phenotype' }	       
	       pic          = { action = '/db/misc/epic'
	                        title  = 'Acedb Image' }	       
	       protein      = { action = '/db/seq/protein'
	                        title  = 'Protein Summary' }	       
	       rearrange    = { action = '/db/gene/rearrange'
	                        title  = 'Rearrangement Summary' }	       
	       rnai         = { action = '/db/seq/rnai'
	                        title  = 'RNAi Summary' }	       
	       sagetag      = { action = '/db/seq/sage'
	                        title  = 'SAGE Summary' }	       
	       sequence     = { action = '/db/seq/sequence'
	                        title  = 'Sequence Summary' }	       	       
	       strain       = { action = '/db/gene/strain'
	                        title  = 'Strain Summary' }	       
	       structure_data = { action = '/db/gene/structure_data'
	                          title  = 'Structure_data' }	       
	       synteny      = { action = '/db/misc/ebsyn'
                                title  = 'Synteny Browser'
                              }
	       transgene    = { action = '/db/gene/transgene'
	                        title  = 'Transgene Summary' }	       
	       tree         = { action = '/db/misc/etree'
	                        title  = 'Tree Display' }	       
	       variation    = { action = '/db/gene/variation'
	                        title  = 'Variation Summary' }	       
	       wtp          = { action = '/db/seq/wtp'
	                        title  = 'WTP Summary' }	       
	       xml          = { action = '/db/misc/xml'
	                        title  = 'XML' }	       
	       y2h          = { action = '/db/seq/y2h'
	                        title  = 'Y2H interaction' }	       
	       yh           = { action = '/db/seq/y2h'
	                        title  = 'YH interaction' }
	      };

-%]
