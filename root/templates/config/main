[% # config/main
   #
   # This is the main View configuration template. It is processed before
   # any other page by virtue of it being defined as a PRE_PROCESS 
   # template.  This is the place to define any extra template variables,
   # macros, load plugins, and perform any other template setup.

   IF c.config.debug;
     # define a debug() macro directed to c's log
     MACRO debug(message) CALL c.log.debug(message);
   END;

   # Site-wide data
   site = {
     copyright => '2000-2011 The WormBase Consortium',
     unknown   => 'unknown/not applicable',     # what to display if a field is empty/not applicable.
   };
  
   WB2ACE_MAP = c.model('WormBaseAPI').modelmap.WB2ACE_MAP.class;
   ACE2WB_MAP = c.model('WormBaseAPI').modelmap.ACE2WB_MAP.class;

    MACRO tag2link(data,text,title) BLOCK;  
      IF data.defined ;
         UNLESS text; text = data.label; END;
         text2link(data.class, data.id, text, title, data.taxonomy);
      END;
   END;

   # Link a hash of objects
   # Suitable for hashes of objects created by _pack_objects()
   MACRO link_objects(data, separator) BLOCK;
      result = [];
      # Is this a hash?
      IF data.keys;
        FOREACH key IN data.sort;
          result.push(tag2link(data.$key));
        END;
        result.join('<br />');
      # An array (or possibly even a scalar: TT seems to treat single element arrays as scalars?)
      ELSE;
        FOREACH item IN data;
          result.push(tag2link(item));
        END;
        result.join(separator || '<br />');
      END;
   END;


   MACRO get_url(class, id, taxonomy) BLOCK;
        class = (ACE2WB_MAP.$class || class) FILTER lower;
        IF c.config.sections.species.$class.defined;
          c.uri_for('/species', taxonomy || 'c_elegans' ,class, id).path;
        ELSIF (class == 'bench');
          c.uri_for('/me', id).path;
         ELSIF (class == 'picture');
           c.uri_for('/rest', 'widget', 'picture', id, 'lightbox').path;
        ELSIF (class == 'genomic_location');
           c.uri_for('/tools', 'genome', 'gbrowse').path _ '/' _ id;
        ELSE;
          c.uri_for('/resources', class, id).path;
        END;
   END;

# Like tag2link, but for cases where we only have text and no object.
# You must provide both the id and text.
# URLs
    MACRO text2link(class,id,text,title,taxonomy) BLOCK;  
      class = (ACE2WB_MAP.$class || class) FILTER lower;
      IF (class == 'sw' OR class == 'sptrembl' OR class == 'tr'); class = 'uniprot'; END; #HACK: maybe do this somewhere else
      IF site.external_urls.$class.defined; 
          external_link(class, text, id);
       ELSE;
          url = get_url(class, id, taxonomy);

          IF class =='gene';
             text = markup_locus("$text", "locus", 1);
          ELSIF class =='variation' || class=='variation_name';
             text = markup_var("$text","var", 1);
          END;

          "<a href=\"$url\" class=\"$class-link\" title=\"$title\">$text</a>";

          IF (class=='sequence');
            "<a href='" _ c.uri_for('/rest/widget', class, id, 'sequences') _ "' class='button ui-corner-all tip-simple slink' tip='download'>";
              "<span class='ui-icon ui-icon-arrowthickstop-1-s ui-button'></span>";
            "</a>";
          END;
       END;
   END;

    MACRO searchlink(class, id, text) BLOCK;
       url = c.uri_for('/search', class, id);
       "<a href=\"$url\" class=\"$class-link\">$text</a>";
    END;




# use this to pluraize a word
# there exists a TT plugin which does this, but better.
#   See: Template::Plugin::Lingua::EN::Inflect
    MACRO pluralize(word, size) BLOCK;
      UNLESS word; RETURN; END;
      IF (size != 1);
	  	 IF (matches = word.match('^(.*)y$'));
		 	word = matches.0 _ 'ies';					# antibody -> antibodies
		 ELSIF (matches = word.match('^(.*)ium$'));
		 	word = matches.0 _ 'ia';					# bacterium -> bacteria
         ELSIF (matches = word.match('^(.*)cus$'));
            word = matches.0 _ 'ci';                    # locus -> loci
         ELSIF (matches = word.match('^(.*)sis$'));
            word = matches.0 _ 'ses';                   # analysis -> analyses
		 ELSIF (matches = word.match('^(.*)ius$'));
		 	word = matches.0 _ 'ii';					# radius -> radii 
         ELSIF (matches = word.match('^(.*)ss$'));
            word = matches.0 _ 'sses';                   # class -> classes 
		 ELSE; 
		 	word = word _ "s";                          # fallback
		 END;
      END;
      word;
    END;
    
# create venn type diagram with tables and colours
    MACRO venn(title_a, list_a, title_b, list_b, title_ab, list_ab, title_none, list_none) BLOCK;
    ret = "<br/><table class=\"venn\" cellspacing=\"0\" cellpadding=\"5\">";
    ret =  ret _ "<tr class=\"venn-a\"><th colspan=\"2\">$title_a</th></tr>";
          ret =  ret _ "<tr><th class=\"venn-a\"></th>";
          ret =  ret _ "<th class=\"venn-ab\"></th>";
          ret =  ret _ "<th class=\"venn-b\">$title_b</th>";
          ret =  ret _ "<th>$title_none</th>";
          ret =  ret _ "</tr>";
          ret =  ret _ "<tr class=\"venn-data\"><td class=\"venn-a\">";
        FOREACH obj IN list_a;
               ret =  ret _ "<b>" _ tag2link(obj) _ " </b>";
        END;
          ret =  ret _ "</td>";
          ret =  ret _ "<td class=\"venn-ab\">";
        FOREACH obj IN list_ab;
               ret =  ret _ "<b><i>" _ tag2link(obj) _ " </i></b>";
        END;
          ret =  ret _ "</td>";
          ret =  ret _ "<td class=\"venn-b\">";
        FOREACH obj IN list_b;
               ret =  ret _ "<i>" _ tag2link(obj) _ " </i>";
        END;
          ret =  ret _ "</td>";
          ret =  ret _ "<td>";
    
        FOREACH obj IN list_none;
               ret =  ret _ tag2link(obj) _ " ";
        END;
          ret =  ret _ "</td></tr>";
        ret =  ret _ "<tr><td></td><td class=\"venn-b\" colspan=2></td></tr>";
    ret =  ret _ "</table>";
    ret;
    END;


# Used to determine the type of page for layout saving
  MACRO page_class BLOCK;
    UNLESS object;
      ret = c.req.path.replace('[/_]', '-');
      UNLESS ret;ret='home'; END;
      ret;
    ELSE; class; END;
  END;


# Use to create outgoing links from the site
# params: link          - the ID for the link found in root/templates/config/external_urls
#         text          - text displayed in the link
#         id (optional) - the unique id needed in the url.  If not provided, base url is used.
# returns: formatted html to link using url and description from config.  
#          Has google analytics code to record clicks and opens new window
    MACRO external_link(link, text, id) BLOCK;
       UNLESS text; text = id; UNLESS text; RETURN; END; END;
      #not sure why this has to be lower case since some external links are case sensitive eg. Phenobank2
      #link = link FILTER lower;
       IF (link == 'sw' OR link == 'sptrembl' OR link == 'tr'); link = 'uniprot'; END; #HACK: maybe do this somewhere else
       desc = site.external_urls.$link.description;
       IF id;
          USE String=format(site.external_urls.$link.search);
	      IF (link == 'ensembl');
             UNLESS (id.match('&')); id= 'Homo_sapiens&' _ id; END;
             array=id.split('&');
             url = String(array.first array.last);
          ELSE;
                url = String(id);
          END;
       ELSE;
          url = site.external_urls.$link.base;
       END;

       UNLESS url; url = link; END;
       "<a href=\"$url\" 
           onClick=\"WB.recordOutboundLink(this, \'Outbound Links\', \'$url\');\" 
           target=\"_blank\" title=\"$desc\">$text</a>";
    END;


    MACRO get_section(class) BLOCK;
      IF (c.config.sections.species.$class.defined);
        'species';
      ELSE;
        'resources';
      END;
    END;

# Markup any OMIM reference in a text
# marks up ALL references in the format OMIM:(\d+)
# only works for up to two references listed in a row with OMIM before only the first one
# eg. OMIM:604297, 309000
    MACRO markup_omim(text) BLOCK;
      text = "$text";
      text.replace('OMIM:(\d{6})((, )(\d{6}))?', text.search('OMIM:(\d{6})((, )(\d{6}))') ? external_link('OMIM','OMIM:$1', '$1') _  '$3' _ external_link('OMIM', '$4', '$4') : external_link('OMIM','OMIM:$1', '$1'));
    END;

# Markup any locus reference in text
# [A-Za-z]{3,4}-(\d){1,3}[a-z]?
    MACRO markup_locus(text, link) BLOCK;
      text = "$text";
      text.replace('(\b([A-Z][a-z]{1,2}\-)?[a-z]{3,4}-(\d+(\.\d+)?)[a-z]*( [IVXLCDM]+|\(RNAi\))?)', span_class('$1', "locus", 'gene', link));
    END;

# Markup any variation name in text
    MACRO markup_var(text, link) BLOCK;
      text = "$text";
      text.replace('(\b((\()?(ttTi|stP|hIn|[a-z]{1,3}|[a-z]*CE2-)\d+)+)', span_class('$1', "var",'variation', link));
    END;

# format taxonomy
    MACRO taxonomy(genus, species) BLOCK;
      IF species;
        g = genus.chunk(1).0 _ ".";
      ELSE;
        s = genus.split(' ');
        g = s.first.chunk(1).0 _ ".";
        species = s.last;
      END;
        "<span class=\"species\">$g $species</span>";
    END;

    MACRO span_class(text, class, ace_class, link) BLOCK;
      UNLESS link;
         "<span class=\"$class\">" _ searchlink(ace_class, text, text) _ "</span>";
      ELSE;
      "<span class=\"$class\">$text</span>";
      END;
    END;


#  Add params to have options on what to markup.  ie. omim, locus...
    MACRO markup(text, omim, locus, var, link) BLOCK;
      IF ((locus || 1) == 1); text = markup_locus(text, (link || 0)); END;
      IF ((var || 1) == 1); text = markup_var(text, (link || 0)); END;
      IF ((locus || 1) == 1); text = markup_omim(text); END;
      text;
    END;

     MACRO cite_image(extsrc,src) BLOCK;
           '<small>';
           IF extsrc;
              link = extsrc.template;
              FOR match IN extsrc.template.match('\<([^>]+)\>', 'global');
                  IF extsrc.template_items.size == 1; # Person heuristic
                     IF src; # there is an internal source... tag it
                        replacement = tag2link(src);
                     ELSE; # we only have their name?
                        replacement = extsrc.template_items.$match.text;
                     END;
                  ELSE;
                     replacement = external_link(extsrc.template_items.$match.url,
                                                extsrc.template_items.$match.text);
                  END;
                  link = link.replace("\<$match\>", replacement);
              END;
              link;
           ELSIF src;
              IF src.class != 'Paper'; # this is from a person
                 'Courtesy of ';
              END;
              tag2link(src);
           ELSE;
              'No reference data.';
           END;
           '</small>';
     END;

   # load up any other configuration items 
   PROCESS config/external_urls;

   # set defaults for variables, etc.
   DEFAULT 
     message = 'There is no message';

   # Set some default templates
   DEFAULT field_block  = "field_block";
   DEFAULT widget_block = "widget_block";

   # For debugging ONLY!
   USE Dumper(Indent=1);

   #######################################
   # Define some convenient macros   
   #######################################
   # image: wrap a src in an image tag using the format plugin
   USE image  = format('<img src="%s" valign="middle" width="100%">');
   USE toggle = format('<img border="0" height="11" src="%s" width="6" alt="&gt;" valign="middle"> %s');

  ###########################################
  # Class-to-action mapping
  # Map classes to their old school URLs
  # This is only used by the classic view
  ###########################################
  site.class2action = { 	
	       align     = { action = '/db/seq/align'
		             title  = 'alignment' }
	       aligner   = { action = '/db/seq/aligner'
                             title  = 'EST Alignments' }
	       antibody  = { action = '/db/gene/antibody'
                             title  = 'Antibody Summary' }
	       aoterm    = { action = '/db/ontology/anatomy'
                             title  = 'Anatomy Ontology' }
	       author    = { action = '/db/misc/person'
                             title =  'Author Info' }
	       biblio    = { action = '/db/misc/biblio'
                             title  = 'Bibliography' }
	       cds       = { action = '/db/seq/sequence'
                             title  = 'Sequence Summary' }
	       cell      = { action = '/db/cell/cell.cgi'
                             title  = 'Cell Summary' }
	       clone     = { action = '/db/seq/clone'
                             title  = 'Clone Summary' }
	       expression_cluster = { action = '/db/microarray/expression_cluster'
                            	      title  = 'Microarray Expression Cluster Summary' }

	       expr_pattern = { action = '/db/gene/expression'
                        	title  = 'Expression Pattern' }

	       expr_profile = { action = '/db/gene/expr_profile'
	                        title  = 'Expression profile' }

	       gene       = { action = '/db/gene/gene'
                              title  = 'Gene Summary' }

	       gene_name  = { action = '/db/gene/gene'
                              title  = 'Gene Summary' }

	       gene_class = { action = '/db/gene/gene_class'
                              title  = 'Gene Class Summary' }
	       gene_regulation = { action = '/db/gene/regulation'
                    	           title  = 'Gene Regulation Summary' }
	       gmap       = { action = '/db/misc/epic'
                              title  = 'Genetic Map' }
	       go_term    = { action = '/db/ontology/gene'
                              title  = 'GO Term' }
	       go_dag     = { action = '/db/ontology/go_dag'
                              title  = 'GO DAG' }
	       homology_group = { action = '/db/gene/homology_group'
               	                  title  = 'Homology Group' }
	       hunter     = { action = '/db/seq/gbrowse/elegans/'
                              title  = 'Genome Browser' }
	       laboratory = { action = '/db/misc/laboratory'
                              title  = 'Lab Listing' }
	       life_stage = { action = '/db/misc/life_stage'
                              title  = 'Life Stage' }
	       locus      = { action = '/db/gene/locus'
                              title  = 'Locus Summary' }
	       mappingdata = { action = '/gene/mapping_data'
	                       title  = 'Map Data' }
	       mapservlet  = { action = '/db/mapview/geneticmap'
	                       title  = 'Clickable Map' }
	       MindOfWorm  = { action = '/db/cell/mindofworm'
 	                       title  = 'Mind of Worm' }
	       microarray_experiment  = {
		               action  = '/db/microarray/results'
	 	               title   = 'Microarray Summary' }
	       microarray_results    = { action = '/db/microarray/results'
	 	                         title  = 'Microarray Summary' }
	       motif       = { action = '/db/gene/motif'
	                       title  = 'Motif' }
	       model       = { action = '/db/misc/model'
	                       title  = 'Schema' }
	       nbrowse     = { action = '/db/seq/interaction_viewer'
 	                       title  = 'N-Browse Interaction Viewer'}
	       nearby_genes= { action = '/db/gene/genetable#pos'
	                       title  = 'Nearby Genes' }
	       oligo_set    = { action = '/db/seq/pcr'
	                        title  = 'Microarray Oligos' }
	       operon       = { action = '/db/gene/operon'
	                        title  = 'Operon Summary' }	       
	       paper        = { action = '/db/misc/paper'
	                        title  = 'Citation' }	       
	       pcr_product  = { action = '/db/seq/pcr'
	                        title  = 'PCR Assay' }	       
	       pedigree     = { action = '/db/searches/pedigree'
	                        title  = 'Pedigree Browser' }	       
	       person       = { action = '/db/misc/person'
	                        title  = 'Person Info' }	       
	       person_name  = { action = '/db/misc/person'
	                        title  = 'Person Info' }	       
	       phenotype    = { action = '/db/misc/phenotype'
	                        title  = 'Phenotype' }	       
	       pic          = { action = '/db/misc/epic'
	                        title  = 'Acedb Image' }	       
	       protein      = { action = '/db/seq/protein'
	                        title  = 'Protein Summary' }	       
	       rearrange    = { action = '/db/gene/rearrange'
	                        title  = 'Rearrangement Summary' }	       
	       rnai         = { action = '/db/seq/rnai'
	                        title  = 'RNAi Summary' }	       
	       sagetag      = { action = '/db/seq/sage'
	                        title  = 'SAGE Summary' }	       
	       sequence     = { action = '/db/seq/sequence'
	                        title  = 'Sequence Summary' }	       	       
	       strain       = { action = '/db/gene/strain'
	                        title  = 'Strain Summary' }	       
	       structure_data = { action = '/db/gene/structure_data'
	                          title  = 'Structure_data' }	       
	       synteny      = { action = '/db/misc/ebsyn'
                                title  = 'Synteny Browser'
                              }
	       transgene    = { action = '/db/gene/transgene'
	                        title  = 'Transgene Summary' }	       
	       tree         = { action = '/db/misc/etree'
	                        title  = 'Tree Display' }	       
	       variation    = { action = '/db/gene/variation'
	                        title  = 'Variation Summary' }	       
	       wtp          = { action = '/db/seq/wtp'
	                        title  = 'WTP Summary' }	       
	       xml          = { action = '/db/misc/xml'
	                        title  = 'XML' }	       
	       y2h          = { action = '/db/seq/y2h'
	                        title  = 'Y2H interaction' }	       
	       yh           = { action = '/db/seq/y2h'
	                        title  = 'YH interaction' }
	      };

-%]
