sub SubSection {
  return unless defined $_[1];
  PrintMultiple(@_);
  $ROWS_PRINTED++;
}



sub PrintMultiple {
  local $^W = 0;  # get rid of uninit variable warnings

  my $options = shift if ref($_[0]) && ref($_[0]) eq 'HASH';
  my $label   = shift;
  my @a = @_;
  return unless @a;
  my $rowspan  = @a;
  my $first = shift @a;
  print TR($options||{-valign=>'top'},
	   th({-align=>'LEFT',-valign=>'top',-class=>'databody',-rowspan=>$rowspan},length $label>0 ? "$label: " : ''),
	   td({-class=>'databody'},eval{ref($first) && $first->isClass && $first->class !~ /Text/} ? ObjectLink($first)
                                                                                                   : $first)
	  );
  for my $obj (@a) {
    print TR({-class=>'databody'},
	     td(eval{ref($obj) && $obj->isClass && $obj->class !~ /Text/} ? ObjectLink($obj) : $obj)
	    );
  }
}



# (useful if creating tables of disparate information linked/sorted in advance).
# Pass an explicit value for the number of columns to prevent them from spreading across page.
# Pass true to prevent linking
sub Tableize {
  my $list    = shift;
  my $no_link = shift;
  my $columns = shift;
  return unless @$list;
  my $rows = int(sqrt(@$list)) || 1;
  my $table;
  if ($columns) {
    $table = CGI::_tableize(undef,$columns,undef,undef,map {$no_link ? $_ : ObjectLink($_)} @$list);
  } else {
    $table = CGI::_tableize($rows,undef,undef,undef,map {$no_link ? $_ : ObjectLink($_)} @$list);
  }
  $table;
}
