#!/usr/bin/perl
# REIMPLEMENTATION
#   INITIALLY CONVERTED: 02.08.8 by TWH
#   FROZEN: 02.09.08 - twh
#   CVS VERSION: 1.16
#   KEY:
     #++ accounted for
     #-- not yet accounted for


#++ # $Id: operon,v 1.14 2007/12/05 23:12:02 todd Exp $
#++
#++ use strict;
#++ use Ace::Browser::AceSubs;
#++ use ElegansSubs qw(:DEFAULT Bestname);
#++ use CGI qw(:standard *table *TR *td);
#++ use WormBase;
#++ use vars qw/$DB $DBGFF $WORMBASE $operon/;
#++ 
#++ END {
#++   undef $operon;
#++ }
#++ 
#++ $DB    = OpenDatabase() || AceError("Couldn't open database.");
#++ $WORMBASE = WormBase->new($DB);
#++ 
#++ 
#++ # We need more error checking here and true database accessors
#++ $operon = GetAceObject();
#++ $DBGFF = OpenGFFDB($DB,$operon->Species) || AceError("Couldn't open GFF database.") if $operon;
#++ 
#++ PrintTop($operon,'Operon',$operon ? "Operon summary for $operon" : $operon);
#++ print_prompt();
#++ print_report() if $operon;
#++ PrintBottom;
#++ exit;
#++ 
#++ sub print_prompt {
#++   $WORMBASE->print_prompt(-message  => 'Specify an operon ID such as',
#++ 			  -class    => 'operon',
#++ 			  -examples => [ {'no_message'   => 'CEOP1140'},
#++ 				       ]);
#++ }
#++ 
#++ sub print_report {
#++   my @genes   = $operon->Contains_Gene;
#++   my $species = $operon->Species;
#++ 
#++  # References will be handled generically
#++  my $reference = $operon->Reference ? 
#++    ObjectLink($operon->Reference,$operon->Reference->Title) 
#++      : "Blumenthal et al, Nature 417: 851-854 (2002) (cgc5303)";
#++
#++  # Evidence will be handled generically
#++  my %notes;  
#++  for my $gene (@genes) {
#++    for my $sl ($gene->col) {
#++      my @evidence = $sl->col;
#++      $notes{$gene}{$sl} = \@evidence;
#++    }
#++  }
#++  
#++  # THIS SHOULD BE GENERIC ACROSS GFF FEATURES
#++  my $browser_url = '';
#++  if (my $segment = $DBGFF->segment('Operon' => $operon)) {
#++    my ($ref,$start,$stop) = ($segment->abs_ref,$segment->abs_start,$segment->abs_stop);
#++    $browser_url = a({-href=>HunterUrl($ref,$start,$stop)},"$ref:$start..$stop");
#++  }
#++
#++  print h3('Operon Structure');
#++  print start_table;
#++  print TR({-class=>'datatitle'},th('CDS'),th('Spliced Leader'),th('SL Evidence'));
#++   for my $gene (@genes) {
#++    print start_TR({-class=>'databody'});
#++    my @evidence;
#++      # PROPER DISPLAY NAME TO BE HANDLED BY VIEW, NOT MODEL
#++    print th(a({-href=>Object2URL($gene)},$gene->Sequence_name . 
#++		($gene->CGC_name ? " (" . $gene->CGC_name . ")" : '')
#++	));
#++ 
#++     my @sl = keys %{$notes{$gene}};
#++     @sl = '&nbsp;' unless @sl;
#++ 
#++     foreach ($gene->Corresponding_CDS) {
#++       my @associated_features = $_->Associated_feature;
#++       push @sl,map {$_->Method } @associated_features;
#++     }
#++     print td(join(br,@sl));
#++     print start_td();
#++     for my $sl (@sl) {
#++       @evidence = @{$notes{$gene}{$sl}} if $notes{$gene}{$sl};
#++       print (shift @evidence || '&nbsp;');
#++       print br if @sl > 1;
#++     }
#++     print end_td;
#++     print end_TR;
#++     while (@evidence) { # more evidence!
#++       print TR({-class=>'databody'},td('&nbsp;')x2,td(shift @evidence));
#++     }
#++   }
#++   print end_table;
#++   
#++   print h3('Other Information');
#++   print start_table;
#++   PrintOne('Genomic Position',$browser_url || '&nbsp;');
#++   PrintOne('Reference: ',$reference);
#++   print end_table;
#++ }
