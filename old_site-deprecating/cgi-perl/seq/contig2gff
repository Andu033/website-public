#!/usr/bin/perl -w

# name: contig2gff (brie3: /usr/local/wormbase/cgi-perl/seq)
# author: Marcela Tello
# date: May 2003

use strict;
use strict 'vars';
use lib '../lib';
use Ace 1.51;


#print "Opening the database... ";

our $DB = Ace->connect(-host => 'brie3',
		       -port => '2005')
  || die "Connection failure: ",Ace->error;
#print "done.\n\n";

my @contigs = $DB->fetch('Contig');
#my @contigs = $DB->fetch(Contig => 'ctg465'); #test
print_gfftable(@contigs);

exit 0;


#############################################################
#############################################################

sub print_gfftable {
  my @contigs = @_;
 
  foreach my $refseq(@contigs) {

# get the physical map coordenates for the contig and eliminate those contigs where the start is greater than the end value
    my @pmap = $refseq->Pmap->row;
    my $start = $pmap[0]; 
    my $stop = $pmap[1];

    unless ($start > $stop) { 
    
# use the class tag as the method and the source for a contig

#      my $class = $refseq->class();    
#      my $source = lc($class);

      my $source = 'contig';
      my $method = 'contig';
      
# convert the physical map coordinates into positive numbers; numbers >100 are better visualized with GBrowse, so will multiply everything by 10...

# the downside is that everything now will start at 10 instead of 1, is this ok?  plus, the negative numbers are going to become huge!  e.g. -24 will be -240
  
      my $offset = 1-$start;  # same as  ((-1) * ($start)) +1
      $start = 10 *($start + $offset);
      $stop = 10 *($stop + $offset);
    
# these are irrelevant for the physical map
      my $score = '.';
      my $strand = '.';
      my $phase = '.';
    
# the group will be given by the class name and the id of each refseq
      my $group = "Contig $refseq";

# get all the clones within the contig 

      my @ref_clones = $refseq->follow('Clone');

# get the subset of only the clones that contain Pmap coordinates

### this takes too much time; an ace-query takes much less time (see below), but needs tweaking to get only the clones that exist within a contig

      my @clones;
      foreach my $c(@ref_clones) {
	my @clone_pmap = eval {$c->at('Position.Pmap')};
	if (@clone_pmap) {
	  push @clones,$c;
	}
      }
      
# print gff 9-columns for the reference sequence (contig)

      print join "\t",($refseq,$source,$method,$start,$stop,$score,$strand,$phase,$group),"\n";    

#####

# get the same values (as above) for each clone within the refseq contig

      foreach my $clone(@clones) {
	my $c_type = eval {$clone->Type};
	my $c_source = lc($c_type) || 'clone';
	my $c_method = 'clone';

# get the pmap coordinates of each clone relative to the refseq contig
	my ($contig,$c_start,$c_stop) = eval {$clone->get('Pmap',1)->row};
	my @clone_pmap = $clone->follow(-tag=>'Pmap',
					-filled=>1);
	for my $r(@clone_pmap) {
	  my @ref_pmap = $r->get('Pmap',1);
	  my $ref_start = $ref_pmap[0];
	  my $ref_offset = 1-$ref_start;  # same as ((-1) * ($ref_start)) +1
	  $c_start = 10 * ($c_start + $ref_offset);
	  $c_stop = 10 * ($c_stop + $ref_offset);
	}
	
	my $c_score = '.';
	my $c_strand = '.';
	my $c_phase = '.';      

# for the group column, get the class and id of the clone, as well as whether the clone has a DNA sequence associated with it

	my $sequence = eval {$clone->Sequence};
	my $note = "Note Sequenced" if ($sequence);

	my $buried_clone;

#	my $finished = eval {$clone->Finished};
#	my @status = $clone->Sequence_status;	
# 	my $accession;
# 	foreach my $s(@status) {
# 	  if ($s eq 'Accession_number') {
# 	    
# my $accession = $clone->Accession_number;
# 	    $s .= " $accession";
# 	  }
# 	}
	
	my $c_group = $note ? "Clone $clone; $note" : "Clone $clone";
	
# print gff 9-columns for each clone
	
	print join "\t",($contig,$c_source,$c_method,$c_start,$c_stop,$c_score,$c_strand,$c_phase,$c_group),"\n";
      } 
    }
  }
}

  
