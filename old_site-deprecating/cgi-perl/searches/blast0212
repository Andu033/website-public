#!/usr/bin/perl
# -*-mode: perl-*-
# blast search script used at the CSHL site.
# This contains some hard-coded path names, which will
# need to be edited for your site.  By default, this
# script is not included among the other search scripts.
# Also see util/dump_genomic.pl for the script used to
# make the DNA dump searched by this script.
# $Id: blast0212,v 1.2 2005/03/24 18:08:37 todd Exp $

use lib '../lib';
use strict;
use vars qw/$TMPNAM $TMPDIR $TMP_FILE $STOP_AT %BLAST_OPTS $cutoff $max_hits/;

use Ace;
use CGI qw/:standard escapeHTML Sub *table center/; 
use IO::File;
use Ace::Browser::AceSubs qw(:DEFAULT Configuration);
use Ace::Browser::SearchSubs;
use Ace::Browser::GeneSubs 'NCBI';
use ElegansSubs qw(:DEFAULT );
use vars '$DB';
use Bio::SearchIO;
use Bio::Graphics;
use Bio::Graphics::Feature;


BEGIN {$|=1}
use constant SEQVIEW => "/db/seq/gbrowse";
use constant MAX_LENGTH => 50_000;
use constant GBROWSE    => "/db/seq/gbrowse?source=wormbase;";
$DB = OpenDatabase() || AceError("Couldn't open database.");

%BLAST_OPTS= ('blastn'   =>  [qw/-progress 2 -hspmax 10/],
	      'blastx'   =>  [qw/-progress 2 -hspmax 10/],
	      'blastp'   =>  [qw/-progress 2 -hspmax 10/],
	      'tblastn'  =>  [qw/-progress 2 -hspmax 10/],
	     );

$TMPNAM = 'aaaaaa';
$TMPDIR = $ENV{'TMPDIR'} || $ENV{'TEMP'} || '/usr/tmp';

# Cutoffs and Max_hits
$cutoff   = defined param('cutoff')  ? param('cutoff')   : Configuration->Blast_cutoff;
$max_hits = defined param('max_hits')? param('max_hits') : Configuration->Blast_maxhits;
$max_hits = 99999999 if $max_hits eq 'ALL';
$cutoff = 9999 unless $cutoff=~/^[.eE\d-]+$/;

PrintTop(undef,undef,undef,
	  '-Title'  =>'BLAST Search',
	  '-Target' =>'_top',
	  '-Class'  =>'search',
	  '-Xbase'   => 'http://www.wormbase.org',
	);

my $done;

do_autoload() if param('autoload');

if (param('sequence') && param('action')=~/BLAST/) {
  # check that the search program matches the search database
  my %ok_databases = map{$_=>1} @{Configuration->Blast_ok->{param('program')}};
  if ($ok_databases{param('db')}) {
    do_search( param('sequence'),param('name'),
	       param('program'), param('db'), $max_hits,$cutoff );
    $done++;
  } else {
    print p({-class=>'error'},
	     "You have chosen an incompatible combination of search program and database. Please adjust."
	   );
  }
}

do_prompt() unless $done;

PrintBottom;
#-----------------------------  END PROGRAM -----------------------------------


sub do_prompt {
  my $labels = Configuration->Blast_labels;
  my ($def_program,$def_db) = @{Configuration->Blast_default};
  DisplayInstructions('Blast Search',
		      'Paste your sequence into the large text field and enter its name (optional).',
                      'Press the submit button to perform a blast search against all sequences in the database.');
  print start_form(),
  table({-class=>'databody',width=>'100%'},
	TR(
	   th ({-class=>'searchtitle'},'BLAST Search')
	  ),
	TR(
	   td({-align=>'center',-class=>'searchbody'},
	      font({-size=>'-1'},b('Seq. name (Opt.):')), 
	      textfield(-name=>'name', -size=>'10'),
	      '&nbsp;&nbsp;',
	      font({-size=>'-1'},b('Program: ')),
	      popup_menu(-name=>'program',
			 -value=>[qw/blastn blastx blastp tblastn/],
			 -default=>$def_program),
	      font({-size=>'-1'},'&nbsp;',b('Database: ')),
	      popup_menu(-name=>'db',-value=>$labels,-default=>$def_db)
	     )
	  ),
	TR(
	   td({-align=>'center',-class=>'searchbody'},
	      font({-size=>'-1'},b('P value cutoff: ')),
	      popup_menu(-name=>'cutoff',
			 -value=>[qw/1E-100 1E-50 1E-10 1E-5 0.001 0.01 0.1 9999/],
			 -labels => {9999 => 'NONE'},
			 -default=>$cutoff), 
	      '&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;',
	      font({-size=>'-1'},b('Show max hits:')),
	      popup_menu(-name=>'max_hits',
			 -value=>[qw/1 5 10 15 20 50 100 ALL/],
			 -default=>$max_hits,
			),
	     )
	  ),
	TR(
	   td({align=>'center',-class=>'searchbody'},
	      font({-size=>'-1'},b('Sequence (raw or FASTA format):')),
	      br,
	      pre(tt(textarea(-name=>'sequence',-rows=>12,-cols=>80))),
	      br,br,
	      submit(-name=>'action',-value=>'Run BLAST'),
	      br,br,
	     )
	  ),
       ),
	     end_form;

  print
  table(Tr({-class=>'datatitle'},
	   th ['Program','Search Seq','Database(s)']),
	Tr({-class=>'databody'},
	   td ['blastp','protein','WormPep']),
	Tr({-class=>'databody'},
	   td ['blastn','nucleotide','elegans ESTs, elegans genomic']),
	Tr({-class=>'databody'},
	   td ['blastx','nucleotide','WormPep']),
	Tr({-class=>'databody'},
	   td ['tblastn','protein','elegans ESTs, elegans genomic'],
	  ),
       );
} # end of sub do_prompt


###############################################################################

sub do_search {
  my ($sequence,$name,$program,$db,$max_hits,$cutoff) = @_;
  #  warn "blast/blat length = ",length $sequence;

  if (length $sequence > MAX_LENGTH) {
    print p({-class=>'error'},
	    "This program cannot accept sequences of length greater than ${\MAX_LENGTH} bp."
	   );
    return;
  } # end if

  if ((length $sequence < 25) and ($program eq "blastn")){
    print p({-class=>'error'},
	        "Sorry, $program can only accept sequences that are at least 25bp long.  Your sequence is only ", length $sequence , "bp.  Please try using the 'Browse Genome' link for shorter sequences."
	       );

    return;
  } # end if


  # Make temp file and Do blast
  $name = "My_Query" if !$name;
  if ($sequence !~/^>/) {$sequence = ">$name\n".$sequence;}

  local(*B);
  $TMP_FILE = tmpnam('.fasta');
  $name = to_fasta($TMP_FILE,$sequence,$name);

  # parse the hits and turn into nicely formatted HTML
  print h2('Results Summary',);
  #****************************************************************************
  if ($program =~ /blast/){
      my $path = Configuration()->Blast_bin . "/$program";
      #print $path;
      open(B,"-|") || do {
	@ENV{qw/BLASTMAT BLASTFILTER BLASTDB/} = (Configuration->Blast_matrix,
						  Configuration->Blast_filter,
						  Configuration->Blast_db);
	exec($path,$db,$TMP_FILE,@{$BLAST_OPTS{$program}})
	  && die"Couldn't exec:$!";
      }; # end do

      my ($hits_AofH) = blast_data(\*B);    # Get blast result


      if (!($hits_AofH)) {
	print h4("Sorry, no hits");exit;
      }
      do_blast_stuff($hits_AofH);
    } # end if blast
}  # end of sub do_search
#------------------------------------------------------------------------------


###############################################################################
sub to_fasta {
  my ($tmp,$sequence,$name) = @_;
  if ($sequence=~/^>(.+)$/m) { #fasta format already
    $name = $1;
    $sequence=$';
  }
  $name ||= 'Untitled Sequence submitted by ' . remote_host();
  $sequence=~tr/a-zA-Z//cd;
  $sequence=~s/(.{80})/$1\n/g;

  my $file = IO::File->new(">$tmp") 
    || AceError("Couldn't open temporary file for writing sequence: $!");

  print $file ">$name\n$sequence";
  $file->close();
  $name;
}


###############################################################################
sub do_blast_stuff {
  my $hits_AofH= shift;
  if (!($hits_AofH)) { print h4("Sorry no hits"); exit;}
  if (!($hits_AofH)) { print h4("Sorry no hits"); exit;}

  my @rows=
    TR(th(['Sequence','Description','Details','High Score','P'.Sub('N'),'N']));


  my $qname = $hits_AofH->[0]->{qname};
  my $panel = prep_image ( $qname, $hits_AofH->[0]->{qlength} );

  my $hits = 0;
  my $count = 0;
  my %align;
  my @gbrowse_links;               # stores gbrowse links for hsp printout
  my @image_hits;                  # stores all the hit obj for the image
  my @select_hits;
  if ($qname !~ /^My_query/) {$qname .= "_[MY_QUERY]";}

  my $self = url(-full=>1);
  foreach (@{$hits_AofH}){
    last if $hits >= $max_hits;
    $hits++;

    my $significance = $_->{hit}->significance;
    next unless defined $significance;
    next if $significance > $cutoff;
    push (@select_hits, $_);

    my $hname = $_->{hit}->name;


    $align{$hname}++;
    my $n =  scalar @{$_->{hsps}};
    my $descript = $_->{hit}->description;
    $descript =~s/^(.{55}).*/$1/;  # just get first 55 char of descriptn

    my $gbrowse = get_gbrowse_site($_->{hsps},$hname, $qname, "BlastHSPs_from_Query");
   push (@gbrowse_links, $gbrowse);

    #************************************************************************
    # Add to table
    push(@rows,
	 TR(th({-align=>'LEFT'},
	       a({-href=>to_tree($hname),-name=>$hname},$hname)),
	    td($descript,"..." ),
	    td((a{-href=>"$self\#${hname}_hsp"},'Alignment,'),
	       (a{-href=>"$gbrowse"},"Genome View")),
	    td($_->{hit}->raw_score),
	    td($significance),
	    td($n)
	   ));

    #************************************************************************
    # Prepares hits image information 
    my @hsps;
    for my $eachhsp (@{$_->{hsps}}){
      # find where hsps hit in query coordinates
      my $hsp_obj = Bio::Graphics::Feature->new(-start  => $eachhsp->start,
						-end    => $eachhsp->end,
						-score  => $eachhsp->score,
					       );
      push (@hsps, $hsp_obj);
    }
    my $hit_image = Bio::Graphics::Feature->new(-segments => \@hsps,
						-name    => $hname,
					       );

    $panel->add_track(segments => $hit_image,
		      -label   => 1,
		      -height  => 6,
		      -bgcolor => \&colour,
		   );
  } # end foreach .@{$hits_AofH}....

  #***************************************************************************
  # Print image and table
  my $image_gd =  $panel->gd;
  my $image_url = AceImage($image_gd);
  print center(img({-src=>$image_url}));

  print br();
  print table({-border=>undef,-width=>'100%'},
	      join("\n",@rows)),"\n" if $hits > 0;

  $count = scalar keys %align;
  print p(strong({-style=>'color: red'},"$hits hits total ($count above cutoff of $cutoff)"));

  # return to search page button
  if (0) {
    print start_form;
    print hidden($_) foreach qw(sequence name db program cutoff max_hits);
    print submit(-name=>'action',-value=>'Search Again'),
      end_form;
  } # end of if


  print hr,h2('Alignments') if $count > 0;
  prepare_print_hsp(\@select_hits, \%align, \@gbrowse_links); # print HSPaligns

  close B;
} # end of do_blast_stuff


###############################################################################
sub prep_image {
  my ($qname, $qlength) = @_;
  my $bgf = 'Bio::Graphics::Feature';

  # Create scoring track
  my @score_blocks;    # stores a coloured bar for each score range
  my @key_score = (  10,   45,    79,    199,     201 );
  my @key_label = ("<40","<50", "<80", "<200", ">=200");
  my $spacing = ($qlength/ 6);          # for the layout of the score key
  my $position =1;

  for (my $i =0; $i <5; $i++){
    my $tmp_block= $bgf->new(-segments=>[
					 $bgf->new (
						    -start => $position,
						    -end =>$position +$spacing,
						    -score=>$key_score[$i]),
					],
			     -name   => $key_label[$i],
			    );
    $position += $spacing + $spacing/4;

    push (@score_blocks, $tmp_block);
  }

  my $query_image= $bgf->new (-start  => 1,
			      -end    => $qlength,
			      -name   => $qname,
			      -strand => 1);

  my $panel = Bio::Graphics::Panel->new (-segment    => $query_image,
					 -width      => 800,
					 -pad_bottom => 20,
					);

  $panel->add_track (segments    => \@score_blocks,
		     -label      => sub {
		       my $feature = shift;
		       my $label = $feature->name;
		       return $label;
		     },
		     -bgcolor => \&colour,
		    );

  $panel->add_track (arrow    => $query_image,
		     -tick    => 2,
		     -height  => 6,
		     -label   => 1,
		    );
  return ($panel);
}



###############################################################################
sub to_fasta {
  my ($tmp,$sequence,$name) = @_;
  if ($sequence=~/^>(.+)$/m) { #fasta format already
    $name = $1;
    $sequence=$';
  }
  $name ||= 'Untitled Sequence submitted by ' . remote_host();
  $sequence=~tr/a-zA-Z//cd;
  $sequence=~s/(.{80})/$1\n/g;

  my $file = IO::File->new(">$tmp") 
    || AceError("Couldn't open temporary file for writing sequence: $!");

  print $file ">$name\n$sequence";
  $file->close();
  $name;
}

###############################################################################
sub colour {
  my $feature = shift;
  my $score   = $feature->score;
  return 'lavenderblush' if $score < 40;
  return 'peachpuff'     if $score < 50;
  return 'thistle'       if $score < 80;
  return 'mediumorchid'  if $score <200;
  return 'purple';
}

###############################################################################
sub get_gbrowse_site {
  my ($block_start, $hit, $query, $name, $block_size)=@_;
  my $highest = $block_start->[0];  # end of last block
  my $lowest = $block_start->[0];   # start of first block

 my $ranges;                   # string of block ranges
  foreach my $start (@$block_start){
    if ($block_size){
 	my $tmp_stop = (shift @$block_size) + $start;
	$ranges .= $start."-".$tmp_stop.",";

	for ($start, $tmp_stop){
	  $lowest = $_ if $_ < $lowest;
	  $highest = $_ if $_ > $highest;
	}
      }
    else {$ranges .= $start->hstart."-".$start->hend.",";}
 }
  chop $ranges;                  # get rid of the last extra ","
  $hit =~ s/CHROMOSOME_//;

  # For the blat hits need to define display region (1000 bp either side)
  $highest += 1000;
  $lowest -=1000 if $lowest >1000;
  # Only add in these range restrictions for the blat display
  my $add_in = $name =~/^Blast/?"": ":$lowest..$highest";

  my $gbrowse = GBROWSE."name=$hit$add_in;auto=$hit+$name+$query+$ranges";
  #print "$gbrowse <BR>" if DEBUG;

  return $gbrowse;
}

###############################################################################
sub prepare_print_hsp {
  my $hits_AofH = shift;
  my $show = shift;                         # \$align
  my $gbrowse_links = shift;
  my $count_hits=0;                         # count hits for gbrowse link

  for my $each_hit (@$hits_AofH) {
    # see if it is true
    my $description = $each_hit->{hit}->description;
    my $hit = $each_hit->{hit}->name;
    return unless $show->{$hit};            # exit unless this is really a hit
    print p(h3
	    (a({-href=>to_tree($hit),-name=>"$hit"."_hsp"},escapeHTML($hit)),
	     '&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;',
	    (a{-href=>"$gbrowse_links->[$count_hits]"},"Genome View")
	   ));
    $count_hits++;

    # fix something in the elegans database that I don't like
    $description =~ s!/cds=!/cds_count=!g;   # change /cds=x to /cds_counts=x
    $description = escapeHTML($description);
    $description =~ s/gb=(\w+)/'gb='.
      a({-href=>NCBI . "?db=n&form=1&field=Sequence+ID&term=$1"},$1)/meg;

    # $id = CHROMOSOME_X/12345,54321, $ref = CHROMOSOME_X, $start, $stop
    if ($description =~ m!/map=((\w+)\/(\d+),(\d+))!) {
      my ($id,$ref,$start,$stop) = ($1,$2,$3,$4);
      $ref =~ s/^CHROMOSOME_//;
      ($start,$stop) = ($stop,$start) if $stop < $start;
      $description =~ s{/map=(\S+)}
	{'/map=' . a({-href=>SEQVIEW()."?name=$ref:$start..$stop"},$id)}me;
    }
    $description =~ s!/(\w+)=!b({-Style=>'color: red'},$1).'='!ge;
    print_hsp_info($description, $each_hit);
    print a({-href=>"#$hit"},"Summary table"),hr;
  } # end for foreach hit
  return 1;
}


###############################################################################
sub print_hsp_info  {
  my ($description, $each_hit) = @_;

  print p({-class=>'small'},$description);
  print "<PRE>";

  for my $info (@{$each_hit->{hsps}}){
    my $identical = sprintf("%.0f",(100*$info->frac_identical(['query'])));
    my $positive  = sprintf("%.0f",(100*$info->frac_conserved(['query'])));
    my $strand = "Plus";
    if ($info->strand) {
      $strand =$info->strand>0 ? "Plus" : "Minus";
      print  "\n\n$strand Strand HSP\t";
    }
    print "Score: ",$info->score," (",$info->bits," bits) \t";
    print "Expect: ",$info->evalue," \t";
    print "Sum P (",scalar @{$each_hit->{hsps}},"): ",$info->pvalue,"\n";
    print "Identities = $identical% \t";
    print "Positives = $positive% \t\t";
    print "Strand = $strand /Plus" if $info->strand;
    print "\n\n";
    my @query    = $info->query_string=~/.{1,60}/g;
    my @homology = map { s/\w/\|/g; $_ } $info->homology_string=~/.{1,60}/g;
    my @hit      = $info->hit_string=~/.{1,60}/g;
    my ($qstart,$qend) = ($info->start, $info->end);
    my ($hstart, $hend) = ( $info->hstart,$info->hend);
    ($qstart,$qend) = ($qend,$qstart) if $strand eq "Minus";

    # Error check
    if ($hstart > $hend)   {print "Error: $hstart is greater";}
    if ($strand eq "Plus") {print "Error start grater\n" if $qstart > $qend;}
    if ($strand eq "Minus"){print "Error stop grater\n" if $qstart < $qend;}

    # Find start and stops Print out alignment
    my ($qtmp_end, $htmp_end);
    for my $i (0..$#query){
      $qtmp_end = seq_positions($qstart, $i, \@query, $strand);
      print "Query:   $qstart\t $query[$i]  $qtmp_end\n";
      if ($i !=$#query){$qstart = $strand eq "Plus"? ++$qtmp_end: --$qtmp_end;}
      print "\t\t $homology[$i]\n";

      $htmp_end = seq_positions($hstart, $i, \@hit, "Plus");
      print "Hit  :   $hstart\t $hit[$i] $htmp_end\n\n";
      $hstart = ++$htmp_end;
    }
    # Error check
    print "Error: in query start and stops"  if $qtmp_end != $qend;
    print "Error: in hit start and stops"  if $htmp_end-1 != $hend;
  } # end for my $info
  print "</PRE>";
  return 1;
}


###############################################################################
sub to_tree {
  my $hit = shift;
  return Object2URL($hit,'Sequence');
}

###############################################################################
sub seq_positions{
  my ($start, $i, $sequence, $strand)= @_;
  my $count_bases = ($sequence->[$i] =~ tr/A-Z//);
  my $tmp_end;
  if ($strand eq "Plus"){$tmp_end= $start + $count_bases-1;}
  else  {$tmp_end= $start - $count_bases+1;}
  return ($tmp_end);
}
###############################################################################
# Find a temporary file name. 
sub tmpnam {
  my $suffix = shift;
  while(1) {
    my $tmpfile = "$TMPDIR/${$}" . $TMPNAM++ . $suffix;
    return $tmpfile if IO::File->new($tmpfile,O_EXCL|O_CREAT);
  }
}

##############################################################################
sub do_autoload {
  my $object = param('autoload');
  my ($id,$db) = $object =~ /^Blast (\S+) against (\S+)/;
  return unless $id && $db;
  my ($obj) = $DB->fetch(Sequence => $id);
  return unless $obj;
  param(name => "$obj");
  param(db => $db);
  if ($db eq 'WormPep') {
    param(program => 'blastp');
    param(sequence => $obj->asPeptide);
  } else {
    param(program => 'blastn');
    param(sequence => $obj->asDNA);
  }
} # end of do_autoload


###############################################################################
# Blast data subroutines

use IO::String;
sub blast_data {
  my $fh = shift;
  my @data;
  my $query_name;
  my $header;
  my $end_header =0;

  print "<PRE>\n";
  while( <$fh> ) {
   # print $_;
    push @data, $_ ;
    if ( /^Query=(.*)/ ) {
      $query_name= $1;
      $query_name=~ s/^\s+|\s+$//g;       # rm leading or trailing wh space
      $query_name=~ s/\s+/_/g;             # replace " " with "_"
      if ($query_name =~/^Untitled/){$query_name = "My_query";}
      $end_header=1;
    }
    $header .= $_ if $end_header==0;
  }
  print "</PRE>\n";


  my $iostring = new IO::String(join('',@data));
  my $searchio = new Bio::SearchIO(-format => 'blast',
				   -fh => $iostring);

  my $hits_AofH;              # stores results
  while ( my $result = $searchio->next_result() ) {
    my $query_length = $result->query_length();

    # Print out header info
    print "<PRE>$header\n";
    print "Query:\t  $query_name ($query_length letters)\n";
    print "Database:\t  ", $result->database_name(),"\n";
    print "\t  Size: ",$result->database_entries();
    print "(", $result->database_letters, " letters)\n</PRE>";
    print "\n\n\t SCORE KEY:";

    while( my $hit = $result->next_hit ) {
      my $tmp_infoH;
      $tmp_infoH->{hit}=$hit;
      my $tmp_hsp_infoA;

      while( my $hsp = $hit->next_hsp()) {	
	push (@$tmp_hsp_infoA, $hsp);
      }# end of while $hsp

      $tmp_infoH->{hsps}   = $tmp_hsp_infoA;
      $tmp_infoH->{qname}  = $query_name;
      $tmp_infoH->{qlength}= $query_length;
      push (@$hits_AofH, $tmp_infoH);
    }# end of while $hit
  }# end of while $result

  return ($hits_AofH);
} # end of blast_data


###############################################################################

END {
  unlink $TMP_FILE if $TMP_FILE;
}
