#!/usr/bin/perl

# REIMPLEMENTATION
#   INITIALLY CONVERTED: 03.04.2008
#   FROZEN: 03.04.2008
#   CVS VERSION: 1.39
#   KEY:
     #++ accounted for
     #-- not yet accounted for
#++ 
#++ # -*- Mode: perl -*-
#++ # file: paper
#++ # C. elegans paper report
#++ 
#++ use lib '../lib';
#++ 
#++ use strict;
#++ use vars qw/$DB $WORMBASE $name $paper/;
#++ use Ace 1.51;
#++ use Ace::Browser::AceSubs qw/:DEFAULT AceRedirect/;
#++ 
#++ use ElegansSubs qw(:DEFAULT
#++                     Bestname
                    build_citation);
#++ use WormBase;
#++ use Data::Dumper;
#++ use CGI qw/:standard :html3 escape/;
#++ use DBI;
#++ 
#++ END {
#++   undef $WORMBASE;
#++   undef $name;
#++   undef $paper;
#++ }
#++ 
use constant LINK_TYPE => 'image';
#++ #use constant LINK_TYPE => 'generic';
#++ #use constant LINK_TYPE => 'id';
#++ 
#++ # print HTTP header & open the database
#++ $DB = OpenDatabase() || AceError("Couldn't open database.");
#++ $WORMBASE = WormBase->new($DB);
#++ 
#++ $name  = param('name');
$paper = get_paper() if $name;

my $title;
if ($paper) {
    my @title_words = split(/\W/,$paper->Title);
    $title = join(" ",@title_words[0..10]);
    $title .= '...' if @title_words > 10;
}

PrintTop($paper,'Paper',($title ? "Citation: $title" : 'Citation'));
PrintWarning($name)  if $name && !$paper;
print_prompt();
print_report($paper) if $paper;
PrintBottom();

# exit 0;

sub print_prompt {
  $WORMBASE->print_prompt(-message  => 'Type in a citation ID such as',
			  -class    => 'Paper',
			  -examples => ['11988761','WBPaper00006396','cgc184']);

}

sub print_report {
  my $paper = shift;

  # Check if authors are mapped
  # Connect to database
  my $db   = Configuration->Geo_map_db;
  my $user = Configuration->Geo_map_user;
  my $pass = Configuration->Geo_map_pass;
  my $dbh= DBI->connect("dbi:mysql:$db", $user, $pass, 
                        {PrintError => 1, RaiseError => 1}
                        );

  # Check if this paper id points any valid addresses
  my $sth = $dbh->prepare(qq[SELECT count(*) FROM wb_by_paper WHERE paper_id = ? 
                             AND longitude IS NOT NULL AND latitude IS NOT NULL]);
  $sth->bind_param(1, $paper);
  $sth->execute;
  my ($valid_count) = $sth->fetchrow_array;
  my $geo_map_url = "/db/misc/geo_map_by_paper?paper=$paper" if $valid_count;

#  # Some of these values may be contained in the Paper hash
#  # These will be overridden below
#  my @authors   = $paper->Author;
#  my $title     = $paper->Title;
#  my $journal   = $paper->Journal;
#  my $yr        = $paper->Year;
#  my $volume    = $paper->Volume;
#  my @pages     = $paper->Page ? $paper->Page->row : ();
  my $abs       = $paper->Abstract;
  
  my $ref = build_citation(-paper  => $paper,
			   -include_images => 1,
			   -include_externals => 1,
			   -format => 'long'
			   );
  print $ref;
  
  if ($abs && (my $abstext = $DB->fetch(LongText=>$abs))) {
    my $text = $abstext->right;
    $text = rewrap(\$text);

    # turn references into URLs.
    # Bug here: objects with the same/similar names are not handled correctly.
    my @references = $paper->Refers_to(2);
    my %done;
    foreach my $ref (@references) {
      $ref = Bestname($ref) if $ref->class eq 'Gene';
      my $s = "$ref";
      $ref = $ref->Public_name_for if $ref->class eq 'Gene_name';
      next if $done{$s}++;
      # The boundary assertion includes things like periods,
      # meaning that clone names (D2089)
      # will overwrite already substitued gene names (D2089.5)
      # $text =~ s/\b($s)\b/a({-href=>Object2URL($_)},"$1")/gie;
      #$text =~ s/\b\Q$s\E([\s|,])/a({-href=>Object2URL($_)},"$s") . $1 /gie;
      $text =~ s/\b\Q$s\E([\s|,])/a({-href=>Object2URL($ref)},"$s") . $1 /gie;
    }
    print p($text);
  } else {
    print p(font({color=>'red'},'No abstract available'));
  }

  if (1) {
    my @xref = $paper->Refers_to;
    my @keywords = $paper->Keyword;
    my @items;
    if (@xref || @keywords) {
      print h2("Cross references");
      for my $ref (@xref) {
	my $thingies = join(', ',map { a({-href=>Object2URL($_)},$_->class eq 'Gene' ? Bestname($_) : $_)} $ref->col);
	my $t = $ref eq 'Gene' ? 'Gene' : $ref;
	push (@items,li(b("${t}s:"),i($thingies)));
      }
      push (@items,li(b("Keywords: "),
		      join(", ",map { a({-href=>Object2URL($_)},$_)} @keywords)))
	if @keywords;
      print ul(@items);
    }
  }

  add_external_links_table();

  if ($geo_map_url) {
    print h2("Author Locations");
    print qq[<iframe src ="$geo_map_url" height="370px" width="700px"
             frameborder="0" scrolling="no"></iframe>];
  }  
  
}

sub rewrap {
  my $text = shift;
  $$text=~s/^\n+//gs;
  $$text=~s/\n+$//gs;
  my @para = ();
  my $para = '';
  foreach (split "\n",$$text) {
    $para .= "$_ ";
    if (length($_) < 50 && /[.!?\"]$/) {
      push(@para,$para);
      undef $para;
    }
  }
  push(@para,p($para)) if $para;
  return p(\@para);
}


#++ 
#++ 
#++ 
#++ sub get_paper {
#++   # First try fetching WBPaper IDs
#++   my @papers = $DB->fetch(-class =>'Paper',
#++ 			  -name  => $name,
#++ #			  -fill  => 1
#++ 			 );
#++ 
#++   my %seen;
#++   my @uniques = grep {!$seen{$_}} @papers;
#++   if (@uniques > 1) {
#++     MultipleChoices('paper',\@uniques);
#++     exit 0;
#++   }
#++ 
#++   unless (@papers) {
#++     # No?  Let's try fetching via Paper_name
#++     my @paper_names = $DB->fetch(-class =>'Paper_name',
#++ 				 -name  => $name,
#++ 				 -fill  => 1
#++ 				);
#++     my %seen;
#++     @papers = grep {!$seen{$_}}
#++       map {
#++ 	$_->CGC_name_for 
#++ 	  || $_->PMID_for
#++ 	    || $_->Medline_name_for
#++ 	      || $_->Meeting_abstract_name
#++ 		|| $_->WBG_abstract_name
#++ 		  || $_->Old_WBPaper_name
#++ 		    || $_->Other_name_for;
#++       } @paper_names;
#++   }
#++ 
#++   # Uniquify, displaying multiple choice if necessary
#++   my %seen;
#++   my @uniques = grep {!$seen{$_}} @papers;
#++   if (@uniques > 1) {
#++     MultipleChoices('paper',\@uniques);
#++     exit 0;
#++   }
#++ 
#++ 
#++   if (@papers && $papers[0]->Merged_into) {
#++       # A merged paper
#++       AceRedirect('paper' => $papers[0]->Merged_into);
#++       exit 0;
#++   }
#++ 
#++   return $papers[0] if @papers;
#++ }
#++ 
#++ 
#++ 
#++ 
#++ sub add_external_links_table {
#++   print h2("Paper Identifiers");
#++   print table(
#++ 	      #	TR(
#++ 	      #	  th({-colspan=>'2'},'Paper IDs')),
#++ 	      TR(td('WormBase'),
#++ 		 td(ObjectLink($paper))),
#++ 	      TR(td('PubMed (PMID)'),
#++ 		 td(($paper->PMID)
#++ 		    ? a({-href=>Configuration->Pubmed_retrieve . $paper->PMID},$paper->PMID)
#++ 		    : 'not available')),
#++ 	      TR(td('CGC'),
#++ 	      	 td(($paper->CGC_name)
#++ 		    ? a({-href=>Object2URL($paper)},"[" . $paper->CGC_name . "]")
#++ 		    : 'not available'))
#++ 	     );
#++ }
