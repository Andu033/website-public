#!/usr/bin/perl
# -*- Mode: perl -*-
# file: feedback
# Provide feedback to data curator(s)

use strict;

use lib '../';
use CGI 2.42 qw(:standard);
use Ace::Browser::AceSubs qw(:DEFAULT Configuration ResolveUrl DoRedirect Header DB_Name);
use ElegansSubs;
use Authen::Captcha;
use vars '@FEEDBACK_RECIPIENTS';

# This page called with the parameters:
#      recipients- numeric index(es) for recipients of message
#      name    - name of object to update
#      class   - class of object to update
#      from    - sender's e-mail address
#      subject - subject of mail message
#      remark  - body of e-mail message

my $where_from   = param('referer') || referer();
my ($object_name)  = $where_from =~ /name=([^=;&]+)/i if $where_from;
my ($object_class) = $where_from =~ /class=([^=;&]+)/i if $where_from;

if (param('return') && $where_from && $where_from !~ /\/feedback/ ) {
  print redirect($where_from);
  exit 0;
}
@FEEDBACK_RECIPIENTS = @{Configuration->Feedback_recipients};

$Ace::Browser::AceSubs::TOP = 0;
PrintTop(undef,undef,undef,-Title=>'WormBase Feedback');

if (param('submit') && send_mail($object_name,$object_class,$where_from)) {
    print_confirmation();
} else {
    print start_form;
    print_instructions();
    print_form( $object_name,$object_class,DB_Name(),$where_from );
    print end_form;
}
PrintBottom();

# exit 0;

sub print_instructions {
  my $recipient = Configuration->Feedback_recipient;
    print
	p({-class=>'small'},
	  "Use this form to send questions or comments to",
	  "the maintainers of this database.  An e-mail message",
	  "will be sent to",a({-href=>"mailto:$recipient"},$recipient)),
        p({-class=>'small'},'For data submission, please use the',
	  a({-href=>'/db/curate/base'},'data submission page.')),
#	  blockquote({-class=>'small'},
#		     checkbox_group(-name    => 'recipients',
#				    -Values  => [(0..$#FEEDBACK_RECIPIENTS)],
#				    -Labels  => { map {
#					$_=>"$FEEDBACK_RECIPIENTS[$_]->[0] ($FEEDBACK_RECIPIENTS[$_]->[1])"
#					} (0..$#FEEDBACK_RECIPIENTS) },
#				    -defaults=>Configuration->Feedback_checked,
#				    -linebreak=>1));
      ;
}

sub print_form {
    my ($name,$class,$db,$where_from) = @_;

#    my $captcha = Authen::Captcha->new(
##				       data_folder   => Configuration->Captcha_data,
##				       output_folder => Configuration->Captcha_output,
#				       data_folder   => '/var/tmp',
#				       output_folder => '/var/tmp',
#				       width =>  25, # optional. default 25
#				       height => 35, # optional. default 35				       
#);
#    print $captcha;
#    
#
#    # create a captcha. Image filename is "$md5sum.png"
#    my $date = `date`;
#    chomp $date;
#    my $md5sum = $captcha->generate_code($date);
#    print $md5sum;


  # check for a valid submitted captcha
  #   $code is the submitted letter combination guess from the user
  #   $md5sum is the submitted md5sum from the user (that we gave them)
#    my $results = $captcha->check_code($code,$md5sum);

    my $lab_name = '';
    if ($name) {
      eval {
	my $db  = OpenDatabase();
	my @classes = $class ? $class : ('Sequence','Protein','Locus','Gene');
	my $obj;
	for my $c (@classes) {
	  $obj ||= $db->fetch($c=>$name);
	}
	my $lab   = $obj->From_laboratory;
	$lab_name = $lab->Mail || $lab;
	$class   = $obj->class;
      };
    }
    print
	table(
	      TR(th({-align=>'RIGHT'},"Your full name:"),
		 td({-align=>'LEFT'},textfield(-name=>'full_name',-size=>40))),
	      
	      TR(th({-align=>'RIGHT'},"Your institution:"),
		 td({-align=>'LEFT'},textfield(-name=>'institution',-size=>40))),

	      TR(th({-align=>'RIGHT'},"Your e-mail address:"),
		 td({-align=>'LEFT'},textfield(-name=>'from',-size=>40))),

	      TR(th({-align=>'RIGHT'},"Subject:"),
		 td({-align=>'LEFT'},textfield(-name=>'subject',
					       -value=>$class && $name ?
					       "Comments on $class $name ($db db)": '',
					       -size=>60))),

	      TR(th({-colspan=>2,-align=>'LEFT'},'Comment or Correction:')),

	      TR(td({-colspan=>2},textarea(-name=>'remark',
					   -rows=>12,
					   -cols=>80,
					   -wrap=>'VIRTUAL'
					   ))),
	      ),
            hidden(-name=>'name',-value=>$name),
	    hidden(-name=>'class',-value=>$class),
	    hidden(-name=>'db',-value=>$db),
	    hidden(-name=>'lab_name',-value=>"$lab_name"),
	    hidden(-name=>'referer',-value=>$where_from),br,
            submit(-name=>'return',-value=>'Cancel & Return',-class=>'error'),
            submit(-name=>'submit',-value=>'Submit Comments');
}

sub send_mail {
    my ($obj_name,$obj_class,$where_from) = @_;

#    my @addresses = map { $FEEDBACK_RECIPIENTS[$_] ? 
#			      $FEEDBACK_RECIPIENTS[$_]->[0]
#				  : () } param('recipients');
    my @addresses = Configuration->Feedback_recipient;
    my $name = param('full_name');
    my $institution = param('institution');
    my $subject = param('subject');
    my $origin = param('lab_name') ? '('.param('lab_name').')' : '';
    $obj_name  = param('name')  || $obj_name  || '(unknown name)';
    $obj_class = param('class') || $obj_class || '(unknown class)';
    $where_from ||= '(unknown)';

    my @missing;
    push @missing,"At least one message recipient"
	unless  @addresses;
    push @missing,"Your e-mail address"     
      unless my $from = param('from');
    push @missing,"A properly formatted e-mail address"
	if $from && $from !~ /.+\@[\w.]+/;
    push @missing,"A comment or correction" 
	unless my $remark = param('remark');
    if (@missing) {
	print
	    p({-class=>'error'},
	      "Your submission could not be processed because",
	      "the following information was missing:"),
	    ol({-class=>'error'},
	       li(\@missing)),
	    p({-class=>'error'},
	      "Please fill in the missing fields and try again.");
	return;
    }



    validate_contents($subject,$name,$institution,$remark);

    my $error = <<END;
Unable to send mail.  Please try again later.  
If the problem persists, contact the site\'s webmaster.
END
    ;
    unless (open (MAIL,"|/usr/lib/sendmail -oi -t")) {
	AceError($error);
	return;
    }
    my $to = join(", ",@addresses);
    print MAIL <<END;
From: $from ($name via WormBase feedback page)
To: $to
Subject: $subject

Full name:   $name
Institution: $institution
Address:     $from

DATABASE RECORD: $obj_class: $obj_name $origin

SUBMITTED FROM PAGE: $where_from

COMMENT TEXT:
$remark
END
    ;
    
    unless (close MAIL) {
	AceError($error);
	return;
    }
    return 1;
}

sub print_confirmation {
    print 
	p("Thank you for taking the time to submit this information.",
	  "Please use the buttons below to submit more reports or to",
	  "return to the database.",
	  ),
	start_form,
	submit(-name=>'restart',-label=>'Submit Another Report'),
	hidden('referer'),
	submit(-name=>'return',-label=>'Return to Database'),
	end_form;
}

sub validate_contents {
    my ($subject,$name,$instution,$remark) = @_;
    my @forbidden = 
	qw/
	prescription
	phentermine
	mortgage
	viagara
	/;
    foreach (@forbidden) {
	exit if $remark =~ /$_/;
    }
}
