#!/usr/bin/perl
# file: example
# example author display

use strict;
use Ace::Browser::AceSubs;
use ElegansSubs qw(:DEFAULT GetEvidence DisplayMoreLink FetchGene Bestname);
use CGI qw(:standard *table);
use vars qw/@PHENOTYPES $DB $phenotype $name/;
$DB = OpenDatabase() || AceError("Couldn't open database.");

#StartCache();

use constant TOO_MANY_DISPLAY_LIMIT => 25;

BEGIN {
    undef $phenotype;
    undef @PHENOTYPES;
    undef $name;
}

$name = param('name');

@PHENOTYPES = fetch_phenotypes() if param('name');
if (@PHENOTYPES) {
    $phenotype = (@PHENOTYPES == 1) ? $PHENOTYPES[0] : undef;  # : would be > 1
}

# All
if ($name eq '*') {
    PrintTop($phenotype,'Phenotype',"All Phenotypes");
    display_table();

# Details list
} elsif (param('details')) {
    my $clean_name = best_phenotype_name($phenotype);    
    PrintTop($phenotype,'Phenotype',$name 
	     ? "Phenotype: $clean_name" : 'Phenotype Search');
    print_details();

# Multiple results list
} elsif (@PHENOTYPES > 1) {
    PrintTop(undef,'Phenotype',"Phenotype Search: $name");
    display_prompt();

    print h3("Your search had ", scalar @PHENOTYPES," hits.  Please choose one:");
    print ol(li([
		 map {
		     ObjectLink($_,$_ 
				. ($_->Description ? ': ' . $_->Description : ''))
		     } @PHENOTYPES]));
    PrintBottom();

# Query
} elsif ($name) {
    my $clean_name = extract_name();
    PrintTop($phenotype,'Phenotype',
	     "Phenotype Search: "
	     . ($clean_name
		? $clean_name : $name)); 
    display_prompt();
    
    if ($phenotype) {
	display_report();
    } else {
	print h3({-class=>'warning'},"No phenotypes corresponding to $name were found.");
    }
} else {
    PrintTop(undef,'Phenotype','Phenotype Search');
    display_prompt();
}

PrintBottom();

exit 0;

########################################
# END MAIN 
########################################

sub display_prompt {
    my $url = url(-absolute=>1);
    print
	start_form,
	p({-class=>'caption'},'Specify a phenotype such as '
	  . a({-href=>$url . '?name=WBPhenotype0000643'},'uncoordinated')
	  . ', ' 
	  . a({-href=>$url . '?name=WBPhenotype0000062'},'lethal') . ' or '
	  . a({-href=>$url . '?name=WBPhenotype0000039'},'WBPhenotype0000039') . '.'
	  . br
	  . 'You may also search using '
	  . a({-href=>$url . '?name=C17E4.5'},'genes')
	  . ', '
	  . a({-href=>$url . '?name=ra612'},'variations')
	  . ', '
	  . a({-href=>$url . '?name=WBRNAi00001701'},'RNAi experiments')      
	  . ', or '
	  . a({-href=>$url . '?name=GO:0040010'},'GO terms')
	  . '.'
	  . br . 'Enter a ' 
	  . a({-href=>url(-absolute=>1) . '?name=*'},'*')
	  . ' to browse all phenotypes: '
	  . textfield(-name=>'name')),
	  end_form;
}

sub extract_name {
    my $clean_name = ($phenotype =~ /WBPheno.*/) ? $phenotype->Primary_name : $phenotype;
    $clean_name =~ s/_/ /g;
    return $clean_name;
}


sub print_details {
    print start_table({-border=>0});
    my $tag = param('details');

    my ($byline,$formatted) = fetch_tags($phenotype,$tag);
    my $subtitle = get_subtitle($tag,$phenotype);
    print p(i("Displaying all " . (scalar @$formatted) . " $subtitle"));
    StartDataTable();
    StartSection($tag); 
    SubSection('',@$formatted);
    EndSection();
    EndDataTable();
    print end_table();
}

sub display_report {
    StartDataTable();
    StartSection('Details');

    
    # This should display counts of Evidence with a link to popup window
    # New window
    # Observation: unc-26 is synaptojanin
    #
    # Table of :
    # Evidence type   Source (linked)
    # To generate - requires object be passed to count references
    # Split Evidence hash parsing into two subroutines
    #     parsing and formatting

    SubSection('Primary name' => extract_name());
    SubSection('Short name'   => GetEvidence(-obj=>$phenotype->Short_name || '',-dont_link=>1));;
    SubSection('Synonym   '   => GetEvidence(-obj=>$phenotype->Synonym || '',-dont_link=>1));;
    SubSection('Description'  => GetEvidence(-obj=>$phenotype->Description || '',-dont_link=>1));

    SubSection('Assay'        => GetEvidence(-obj=>$phenotype->Assay || '',-dont_link=>1));
    SubSection('Remark'       => GetEvidence(-obj=>$phenotype->Remark || '',-dont_link=>1));
    SubSection('WormBase ID' => $phenotype);

    # This phenotype is dead.  It may have been replaced by another.
    if ($phenotype->Dead(0)) {
	my $alternate = eval  {$phenotype->Dead->right };
	SubSection('Note',$alternate ? i("$phenotype has been retired and replaced by " . ObjectLink($alternate))
		   : i("$phenotype has been retired."));
	EndSection();
	return;	
    }

    if ($phenotype->Related_phenotypes(0)) {
	StartSection('Related Phenotypes');
	foreach my $tag (qw/Specialisation_of Generalisation_of/) {
	    my @entries = map { ObjectLink($_,best_phenotype_name($_)) } $phenotype->$tag;
	    (my $label = $tag) =~ s/_/ /g;
	    SubSection($label => join(br,@entries)) if @entries;
	}
    }
    EndSection();

    # Display Genes associated with a particular phenotype
    my @genes = get_associated_genes($phenotype);
    if (@genes) {
	my %seen;
	StartSection('Genes');

	# Too many to display, we haven't requested display, or we aren't downloading
	my $byline = i((scalar @genes) , " genes associated with the phenotype description " . b(best_phenotype_name($phenotype)));
	if (@genes > TOO_MANY_DISPLAY_LIMIT && !param('details')) {
	    my $link = DisplayMoreLink(\@genes,'Gene',undef,'View all entries',1);
	    $link =~ s/[\[\]]//g;
	    $byline .= br . i('Displaying the first ' . TOO_MANY_DISPLAY_LIMIT . " entries. $link.");
	}	   
	
	SubSection('',$byline);
	my @formatted = format_objects(\@genes,'Gene','inline',$phenotype);
	SubSection('',Tableize(\@formatted));
	EndSection();
    }
    
    foreach my $tag (qw/RNAi Variation Transgene GO_term/) {
	if ($phenotype->$tag) {
	    StartSection($tag);    
	    my ($byline,$formatted) = fetch_tags($phenotype,$tag);
	    SubSection('' => $byline,hr,$tag eq 'RNAi' ? @$formatted : Tableize($formatted));
	    EndSection();
	}
    }
    EndDataTable();
}

sub get_associated_genes {
    my $phenotype = shift;
    my @genes;
    foreach ($phenotype->Variation) {
	my $gene = $_->Gene || eval { $_->Predicted_CDS->Gene };
	push @genes,$gene if $gene;
    }
    
    
    foreach ($phenotype->RNAi) {
	push @genes,$_->Gene;
	push @genes, map { $_->Gene } $_->Predicted_gene;
    }
    my %seen;
    my @purged = sort { Bestname($a) cmp Bestname($b) } grep { !$seen{$_}++ } sort @genes;

    return @purged;
}

sub fetch_tags {
    my ($phenotype,$tag) = @_;

    my @objects;
    if ($tag eq 'Gene') {
	@objects = get_associated_genes($phenotype);
    } else {
	@objects = $phenotype->$tag;
    }
    my @results;

    my $subtitle = get_subtitle($tag,$phenotype);
#    if (0) {
#	my ($formatted_not,$formatted,$byline_formatted,$byline_not_observed,$byline);
#	if ($tag eq 'RNAi') {
#	    ($observed,$not_observed) = format_objects(\@objects,$tag,'inline',$phenotype);
#	    $byline_not_observed = i((scalar @$not_observed) . " $subtitle");
#	    # Too many to display, we haven't requested display, or we aren't downloading
#	    if (@$not_observed  > TOO_MANY_DISPLAY_LIMIT && !param('details')) {
#		my $link = DisplayMoreLink($not_observed,$tag,undef,'View all entries',1);
#		$link =~ s/[\[\]]//g;
#		$byline_not_observed .= br .
#		    i('Displaying the first ' . TOO_MANY_DISPLAY_LIMIT . " entries. $link.");
#	    }	   	
#	    
#	    $byline = i((scalar @$observed) . " $subtitle");
#	    # Too many to display, we haven't requested display, or we aren't downloading
#	    if (@$observed  > TOO_MANY_DISPLAY_LIMIT && !param('details')) {
#		my $link = DisplayMoreLink($observed,$tag,undef,'View all entries',1);
#		$link =~ s/[\[\]]//g;
#		$byline .= br .
#		    i('Displaying the first ' . TOO_MANY_DISPLAY_LIMIT . " entries. $link.");
#	    }	
#	    return ($byline,\@$observed,$byline_not_observed,\@$not_observed);
#	}
#	
#    }
    
    my @formatted = format_objects(\@objects,$tag,'inline',$phenotype);
    my $byline = i((scalar @objects) . " $subtitle");
    
    # Too many to display, we haven't requested display, or we aren't downloading
    if (@objects > TOO_MANY_DISPLAY_LIMIT && !param('details')) {
	my $link = DisplayMoreLink(\@objects,$tag,undef,'View all entries',1);
	$link =~ s/[\[\]]//g;
	$byline .= br .
	    i('Displaying the first ' . TOO_MANY_DISPLAY_LIMIT . " entries. $link.");
    }	   
    return($byline,\@formatted);
}


sub get_subtitle {
    my ($tag,$phenotype) = @_;
    my $blurb;
    if ($tag eq 'RNAi') {
	$blurb = 'RNAi experiments annotated';
    } elsif ($tag eq 'GO_term') {
	$blurb = 'gene ontology terms associated';
    } elsif ($tag eq 'Variation') {
	$blurb = 'variations annotated';
    } elsif ($tag eq 'Transgene') {
     	$blurb = 'transgenes annotated';
    } elsif ($tag eq 'Gene') {
	$blurb = 'genes annotated';
    }
    
    return "$blurb with the phenotype description "
	. b(best_phenotype_name($phenotype));
}
    


# Provide some basic formatting of different objects
# for either inline or downloadable format
sub format_objects  {
    my ($objects,$tag,$param,$phenotype) = @_;
    
    my ($count,@rows);
    my ($observed,$not_observed);
    foreach (@$objects) {
	$count++;
	if ($count > TOO_MANY_DISPLAY_LIMIT && !param('details')) {
	    last;
	}
	
	# Format the objects as appropriate for their type
	if ($tag eq 'RNAi') {
	    my $cds  = $_->Predicted_gene;
	    my $gene = $_->Gene;
	    
	    my $cgc  = eval{$gene->CGC_name};
	    my $str  = $cgc ? "$cds ($cgc)" : $cds;
	    my $is_not = is_not($_,$phenotype);
	    push @rows,[ObjectLink($_,$str . " [$_]") . (($is_not) ? " (phenotype not observed in this experiment)" : ''),$str];
#	    push @not_observed,[ObjectLink($_,$str . " [$_]"),$str] if $is_not;
#	    push @observed,[ObjectLink($_,$str . " [$_]"),$str] if !$is_not;
	   
	} elsif ($tag eq 'GO_term') {
	    my @evidence = go_evidence_code($_);
	    my $joined_evidence;
	    foreach (@evidence) {
		my ($ty,$evi) = @$_;
		my $tyy = a({-href=>'http://www.geneontology.org/GO.evidence.html',-target=>'_blank'},$ty);
		
		my $evidence = ($ty) ? "($tyy) $evi" : '';
		$joined_evidence = ($joined_evidence) ? ($joined_evidence . br . $evidence) : $evidence;
	    }
	    my $desc = $_->Term || $_->Definition;
	    my $href = 
		$_
		. (($desc) ? ": $desc" : '')
		. (($joined_evidence) ? "; $joined_evidence" : '');
	    push @rows,[ObjectLink($_,$href),$_];
	} elsif ($tag eq 'Gene') {
	    my $cds  = $_->Corresponding_CDS || $_->Sequence_name;
	    my $cgc  = $_->CGC_name;
	    $cgc     = $_->Public_name if !$cgc && !$cds;  # Fix for some odd records
	    my $str  = $cgc ? "$cds ($cgc)" : $cds;	    
	    push @rows,[ObjectLink($_,$str),$cgc || $cds];
	} else {
	    push @rows,[ObjectLink($_),$_];
	}
    }

#    if ($tag eq 'RNAi') {
#	my @sorted_not = map { $_->[0] } sort { $a->[1] cmp $b->[1] } @not_observed;
#	my @sorted = map { $_->[0] } sort { $a->[1] cmp $b->[1] } @observed;
#	return (\@sorted_not,\@sorted);
#    } else {
	my @sorted = map { $_->[0] } sort { $a->[1] cmp $b->[1] } @rows;
	return @sorted;
#    }
}


# Display whether the phenotype is obsjerved or not
# for RNAi experiments.  Sadly not trivial.
sub is_not {
    my ($obj,$phene) = @_;
    my @phenes = $obj->Phenotype;
    foreach (@phenes)  {
	next unless $_ eq $phene;
	my %keys = map { $_ => 1 } $_->col;
	return 1 if $keys{Not};
	return 0;
    }
    

}


sub go_evidence_code {
    my $term = shift;
    my @type      = $term->col;
    my @evidence  = $term->right->col if $term->right;
    
    my @results;
    foreach my $type (@type) {
	my $evidence = '';
	for my $ev (@evidence) {
	    next unless $ev =~ /evidence$/;
	    (my $desc = $ev) =~ s/_evidence$//;
	    my @supporting_data = $ev->col;
	    $evidence .= ($evidence ? ' and ' : '') . "via $desc ".join '; ',
	    map {
		if ($_->class eq 'Paper') {  # a paper
		    ObjectLink($_,build_citation(-paper=>$_,-format=>'short'));
		} elsif ($_->class eq 'Text' && $ev =~ /Protein/) {  # a protein
		    a({-href=>sprintf(Configuration->Protein_links->{NCBI},$_),-target=>'_blank'},$_);
		} else {
		    ObjectLink($_);
		}
	    } @supporting_data;
	}
	
	push @results,[$type,($type eq 'IEA') ? 'via InterPro' : $evidence];
    }
    #my @proteins = $term->at('Protein_id_evidence');
    return @results;
    
    ##  return ("IEA", "via InterPro");  # Off, (for now) WS142
    #return "$GO_CODES{$type} $evidence" if $type;
    #return "$GO_CODES{IEA} via InterPro";
}



sub fetch_phenotypes {
    # Get them all if requested
    return $DB->fetch(-class=>'Phenotype',-name=>'*') if $name eq '*';

#    # Pull out the ID from searches coming from the autocomplete
#    my ($id) = $name =~ /.*\s\((.*)\)/;
#    print "id is: $id";
#    $name = $id ? $id : $name;
        
    # 1. Simplest case: assume a WBPhene ID
    my @phenes = $DB->fetch(-class=>'Phenotype',-name => $name,-fill=>1) if 
	$name =~ /WBPhen.*/;
    
    # 2. Try text searching the Phenotype class
    unless (@phenes) {
	my @obj = $DB->fetch(-class=>'Phenotype_name',-name=>$name,-fill=>1);
	@phenes = map { $_->Primary_name_for || $_->Synonym_for || $_->Short_name_for } @obj;
	push @phenes,$DB->fetch(-query=>qq{find Phenotype where Description=*$name*});	

    }
    
    # 3. Perhaps we searched with one of the main classes
    # Variation, Transgene, or RNAi
    unless (@phenes) {
	foreach my $class (qw/Variation Transgene RNAi GO_term/) {
	    if (my @objects = $DB->fetch($class => $name)) {
		# Try fetching phenotype objects from these
		push @phenes, map { $_->Phenotype } @objects;
	    }
	}
    }
    
    # 4. Okay, maybe user entered a gene or sequence
    unless (@phenes) {
	my ($gene,$bestname) = FetchGene($DB,$name);
	if ($gene) {
	    my (@objects,$query_class);

	    # Fetch all RNAi objects that map to this gene
	    push @objects,
	    $DB->fetch(-query=>qq{find RNAi where Gene=$gene});

	    # ...or attached to transgenes
	    push @objects,
	    $DB->fetch(-query=>qq{find Transgene where Driven_by_gene=$gene});
				      
	    # ...or perhaps even variations
	    push @objects,
	    $DB->fetch(-query=>qq{find Transgene where Gene=$gene});

	    my %seen;
	    @phenes = grep { !$seen{$_}++ } map { $_->Phenotype } @objects;
	}
    }
    return @phenes if @phenes;
    return '';
}


sub display_table {
  my @rows;

  foreach my $phene (@PHENOTYPES) {
      my @rnai       = $phene->RNAi;
      my @variations = $phene->Variation;
      my @transgene  = $phene->Transgene;
      push @rows,[$phene,
		  $phene->Primary_name,
		  $phene->Description || '',,
		  scalar @rnai,
		  scalar @variations,
		  scalar @transgene,
		  ];
  }
  
  # Corresponds to position in the @rows array
  my %cols = (
	      0 => ['phenotype',    10  ],
	      1 => ['primary name', 10  ],
	      2 => ['description',  10  ],
	      3 => ['RNAi',         5   ],
	      4 => ['Variations',   5   ],
	      5 => ['Transgenes',   5   ],
	      );

  my $sort_by    = url_param('sort');
  $sort_by = ($sort_by eq '') ? 0 : $sort_by; # Have to do it this way because of 0
  my $sort_order = (param('order') eq 'ascending') ? 'descending' : 'ascending';
  my @sorted;
  if ($sort_by =~ /[012]/) {   # Alphanumeric sort columns
    if ($sort_order eq 'ascending') {
      @sorted = sort { lc ($a->[$sort_by]) cmp lc ($b->[$sort_by]) } @rows;
    } else {
      @sorted = sort { lc ($b->[$sort_by]) cmp lc ($a->[$sort_by]) } @rows;
    }
  } else {
    if ($sort_order eq 'ascending') {
      @sorted = sort { $a->[$sort_by] <=> $b->[$sort_by] } @rows;
    } else {
      @sorted = sort { $b->[$sort_by] <=> $a->[$sort_by] } @rows;
    }
  }

  # Create column headers linked with the sort options
  print hr;
  print start_table();
  my $url = url(-absolute=>1,-query=>1);
#  $url =~ s/\?name=$name//;
#  $url .= "?name=$name;sort=";
  $url .= ";sort=";
  
  print TR(
	   map {
	     my ($header,$width) = @{$cols{$_}};
	     th({-class=>'dataheader',-width=>$width},
		a({-href=>$url . $_ . ";order=$sort_order"},
		  $header
		  . img({-width=>17,-src=>'/images/sort.gif'})
		  ))}
	   sort {$a <=> $b} keys %cols);
  
  foreach (@sorted) {
      my ($phenotype,$primary,$description,$rnai,$variation,$transgene) = @$_;
      next if $phenotype eq '=';  # kludge for sloppy data entry
      print TR(td({-class=>'datacell'},ObjectLink($phenotype)),
	       td({-class=>'datacell'},$primary),
	       td({-class=>'datacell'},$description),
	       td({-class=>'datacell'},$rnai),
	       td({-class=>'datacell'},$variation),
	       td({-class=>'datacell'},$transgene));
  }
  print end_table;
}
